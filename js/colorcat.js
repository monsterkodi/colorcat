// koffee 0.56.0

/*
 0000000   0000000   000       0000000   00000000    0000000   0000000   000000000
000       000   000  000      000   000  000   000  000       000   000     000   
000       000   000  000      000   000  0000000    000       000000000     000   
000       000   000  000      000   000  000   000  000       000   000     000   
 0000000   0000000   0000000   0000000   000   000   0000000  000   000     000
 */
var LI, NEWLINE, _, args, bgfunc, bgrd, bgrdColors, c, ci, colorStream, colorize, dimText, expand, fatText, file, fs, funkyBgrd, funkyText, index, j, k, karg, klor, kolor, kolorize, len, len1, len2, len3, line, lines, m, matchr, noon, o, output, p, patternFunc, ref, ref1, ref2, ref3, ref4, ref5, regexes, rngs, s, slash, syntaxStream, text, textColors,
    indexOf = [].indexOf;

_ = require('lodash');

fs = require('fs');

noon = require('noon');

klor = require('klor');

karg = require('karg');

slash = require('kslash');

matchr = require('./matchr');

kolor = klor.kolor;

kolor.globalize();

NEWLINE = /\r?\n/;

text = {
    red: 'r',
    green: 'g',
    blue: 'b',
    yellow: 'y',
    magenta: 'm',
    cyan: 'c',
    gray: 'x',
    black: 'z',
    white: 'w'
};

textColors = '';

ref = _.keys(text);
for (j = 0, len = ref.length; j < len; j++) {
    c = ref[j];
    textColors += "    " + c + "  . = false . - " + text[c] + " . ? " + (kolor[c](bold('██'))) + (kolor[c]('██')) + (kolor[c](dim('██'))) + " " + (kolor[c](c)) + "\n";
}

bgrd = {
    bgBlack: 'Z',
    bgRed: 'R',
    bgGreen: 'G',
    bgBlue: 'B',
    bgYellow: 'Y',
    bgMagenta: 'M',
    bgCyan: 'C',
    bgWhite: 'W'
};

bgfunc = function(c) {
    var s;
    s = bgrd[c];
    switch (s) {
        case 'Z':
            return 'W2';
        case 'W':
            return 'W4';
        default:
            return s + 4;
    }
};

bgrdColors = '';

for (c in bgrd) {
    s = bgrd[c];
    ci = black("    " + _.padEnd(c, 11));
    bgrdColors += "    " + c + "  . = false . - " + bgrd[c] + " . ? " + (reset(kolor[bgfunc(c)](ci))) + "\n";
}

args = karg("\ncolorcat\n\n    file         . ? the file(s) to display or stdin . **\n" + textColors + "\n    fat          . ? " + (bold(white('▲▲     fat'))) + "   . = false\n    dim                                           . = false\n        ?           |" + (dim(white('    ▲▲ dim'))) + " \n" + bgrdColors + "\n    ext          . ? use syntax highlighting for *.ext\n    pattern      . ? colorize with pattern\n    patternFile  . ? colorize with patterns in file   . - P\n    skipEmpty    . ? skip empty lines                       . = false\n    lineNumbers  . ? prepend output with line numbers       . = false\n    debug                                             . - X . = false\n    \nversion   " + (require(__dirname + "/../package.json").version));

if (args.debug) {
    noon = require('noon');
    console.log(noon.stringify(args, {
        colors: true
    }));
}

colorize = function(str, stack) {
    var err, k, len1, len2, m, n, spl;
    try {
        spl = stack.map(function(s) {
            return String(s).split('.');
        });
        spl = _.flatten(spl);
        if (!(indexOf.call(spl, 'keep') >= 0)) {
            for (k = 0, len1 = spl.length; k < len1; k++) {
                s = spl[k];
                if (s.substr(0, 2) === 's:') {
                    str = s.substr(2);
                    spl = spl.filter(function(s) {
                        return s.substr(0, 2) !== 's:';
                    });
                    break;
                }
            }
        }
        for (m = 0, len2 = spl.length; m < len2; m++) {
            n = spl[m];
            if (kolor[n] != null) {
                str = kolor[n](str);
            } else if (kolor[bgfunc(n)] != null) {
                str = kolor[bgfunc(n)](str);
            }
        }
    } catch (error) {
        err = error;
        console.error(err);
    }
    return str;
};

regexes = [];

expand = function(e) {
    var clrlst, cls, cnames, expd, invert, pat;
    clrlst = _.assign(text, bgrd);
    cnames = _.concat(_.keys(text), _.keys(bgrd));
    invert = _.invert(clrlst);
    invert.f = 'bold';
    invert.d = 'dim';
    invert.k = 'keep';
    expd = function(c) {
        var r;
        if (((c != null ? c.split : void 0) != null) && indexOf.call(cnames, c) < 0) {
            s = c.split('s\:');
            r = s[0].split('').map(function(a) {
                return invert[a];
            }).join('.');
            if (s.length > 1) {
                r += '.s:' + s[1];
            }
            return r;
        } else {
            return c;
        }
    };
    for (pat in e) {
        cls = e[pat];
        if (_.isArray(cls)) {
            e[pat] = cls.map(function(clr) {
                return expd(clr.split('.')[0]);
            });
        } else {
            e[pat] = expd(cls);
        }
    }
    return e;
};

funkyText = function(s) {
    return s;
};

funkyBgrd = function(s) {
    return s;
};

ref1 = _.keys(text);
for (k = 0, len1 = ref1.length; k < len1; k++) {
    c = ref1[k];
    if (args[c]) {
        funkyText = kolor[c];
    }
}

ref2 = _.keys(bgrd);
for (m = 0, len2 = ref2.length; m < len2; m++) {
    c = ref2[m];
    if (args[c]) {
        funkyBgrd = kolor[bgfunc(c)];
    }
}

if (args.fat) {
    fatText = function(s) {
        return funkyText(s).bold;
    };
} else {
    fatText = funkyText;
}

if (args.dim) {
    dimText = function(s) {
        return fatText(s).dim;
    };
} else {
    dimText = fatText;
}

patternFunc = function() {
    var loadSyntax, matchrConfig, pattern, patterns;
    loadSyntax = function(f) {
        if (fs.existsSync(f)) {
            return expand(noon.load(f));
        } else {
            return console.error("can't locate syntax file " + f);
        }
    };
    if (args.pattern != null) {
        patterns = expand(noon.parse(args.pattern));
    } else if (args.patternFile != null) {
        patterns = loadSyntax(args.patternFile);
    }
    if (patterns == null) {
        return function(chunk) {
            return funkyBgrd(dimText(chunk));
        };
    }
    matchrConfig = matchr.config(patterns);
    pattern = function(chunk) {
        var clrzd, d, di, diss, o, ref3, rngs;
        chunk = kolor.strip(chunk);
        rngs = matchr.ranges(matchrConfig, chunk);
        diss = matchr.dissect(rngs);
        if (diss.length) {
            for (di = o = ref3 = diss.length - 1; ref3 <= 0 ? o <= 0 : o >= 0; di = ref3 <= 0 ? ++o : --o) {
                d = diss[di];
                clrzd = colorize(d.match, d.stack.reverse());
                chunk = chunk.slice(0, d.start) + clrzd + chunk.slice(d.start + d.match.length);
            }
        }
        return chunk;
    };
    return pattern;
};

colorStream = function(stream, pattern) {
    var lineno;
    lineno = 0;
    return stream.on('data', function(chunk) {
        var colorLines, lines;
        lines = chunk.split('\n');
        colorLines = lines.map(function(l) {
            return pattern(l);
        });
        if (args.skipEmpty) {
            colorLines = colorLines.filter(function(l) {
                return kolor.strip(l).length > 0;
            });
        }
        if (args.lineNumbers) {
            colorLines = colorLines.map(function(l) {
                lineno += 1;
                return gray(dim(_.padEnd("" + lineno, 6))) + l;
            });
        }
        return console.log(colorLines.join('\n'));
    });
};

syntaxStream = function(stream, ext) {
    var lineno;
    lineno = 0;
    return stream.on('data', function(chunk) {
        var colorLines, index, lines, o, ref3, rngs;
        lines = chunk.split('\n');
        colorLines = [];
        rngs = klor.dissect(lines, ext);
        for (index = o = 0, ref3 = lines.length; 0 <= ref3 ? o < ref3 : o > ref3; index = 0 <= ref3 ? ++o : --o) {
            colorLines.push(output(rngs[index], index + 1, []));
        }
        if (args.skipEmpty) {
            colorLines = colorLines.filter(function(l) {
                return kolor.strip(l).length > 0;
            });
        }
        return console.log(colorLines.join('\n'));
    });
};

LI = /(\sli\d\s|\sh\d\s)/;

kolorize = function(chunk) {
    var cn, cr, len3, o, v;
    if (cn = kolor.map[chunk.value]) {
        if (cn instanceof Array) {
            v = chunk.match;
            for (o = 0, len3 = cn.length; o < len3; o++) {
                cr = cn[o];
                v = kolor[cr](v);
            }
            return v;
        } else {
            return kolor[cn](chunk.match);
        }
    }
    if (chunk.value.endsWith('file')) {
        return w8(chunk.match);
    } else if (chunk.value.endsWith('ext')) {
        return w3(chunk.match);
    } else if (chunk.value.startsWith('punct')) {
        if (LI.test(chunk.value)) {
            return colorize({
                match: chunk.match,
                value: chunk.value.replace(LI, ' ')
            });
        } else {
            return w2(chunk.match);
        }
    } else {
        if (LI.test(chunk.value)) {
            return colorize({
                match: chunk.match,
                value: chunk.value.replace(LI, ' ')
            });
        } else {
            return chunk.match;
        }
    }
};

output = function(rngs, number) {
    var clrzd, i, numstr, o, ref3, rpad;
    rpad = function(s, l) {
        s = String(s);
        while (s.length < l) {
            s += ' ';
        }
        return s;
    };
    clrzd = '';
    if (args.lineNumbers) {
        numstr = String(number);
        clrzd += w2(numstr) + rpad('', 4 - numstr.length);
    }
    c = 0;
    for (i = o = 0, ref3 = rngs.length; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
        while (c < rngs[i].start) {
            clrzd += ' ';
            c++;
        }
        clrzd += kolorize(rngs[i]);
        c += rngs[i].length;
    }
    return clrzd;
};


/*
 0000000   0000000   000000000    
000       000   000     000       
000       000000000     000       
000       000   000     000       
 0000000  000   000     000
 */

if (args.file.length) {
    ref3 = args.file;
    for (o = 0, len3 = ref3.length; o < len3; o++) {
        file = ref3[o];
        text = slash.readText(file);
        lines = text.split(NEWLINE);
        rngs = klor.dissect(lines, slash.ext(file));
        for (index = p = 0, ref4 = lines.length; 0 <= ref4 ? p < ref4 : p > ref4; index = 0 <= ref4 ? ++p : --p) {
            line = lines[index];
            if (line.startsWith('//# sourceMappingURL')) {
                continue;
            }
            console.log(output(rngs[index], index + 1, []));
        }
    }
} else {
    process.stdin.setEncoding('utf8');
    if (args.ext && (ref5 = args.ext, indexOf.call(klor.exts, ref5) >= 0)) {
        syntaxStream(process.stdin, args.ext);
    } else {
        colorStream(process.stdin, patternFunc());
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JjYXQuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLDRWQUFBO0lBQUE7O0FBUUEsQ0FBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztBQUNULEVBQUEsR0FBUyxPQUFBLENBQVEsSUFBUjs7QUFDVCxJQUFBLEdBQVMsT0FBQSxDQUFRLE1BQVI7O0FBQ1QsSUFBQSxHQUFTLE9BQUEsQ0FBUSxNQUFSOztBQUNULElBQUEsR0FBUyxPQUFBLENBQVEsTUFBUjs7QUFDVCxLQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7O0FBQ1QsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztBQUVULEtBQUEsR0FBUyxJQUFJLENBQUM7O0FBQ2QsS0FBSyxDQUFDLFNBQU4sQ0FBQTs7QUFFQSxPQUFBLEdBQVU7O0FBUVYsSUFBQSxHQUNJO0lBQUEsR0FBQSxFQUFTLEdBQVQ7SUFDQSxLQUFBLEVBQVMsR0FEVDtJQUVBLElBQUEsRUFBUyxHQUZUO0lBR0EsTUFBQSxFQUFTLEdBSFQ7SUFJQSxPQUFBLEVBQVMsR0FKVDtJQUtBLElBQUEsRUFBUyxHQUxUO0lBTUEsSUFBQSxFQUFTLEdBTlQ7SUFPQSxLQUFBLEVBQVMsR0FQVDtJQVFBLEtBQUEsRUFBUyxHQVJUOzs7QUFVSixVQUFBLEdBQWE7O0FBQ2I7QUFBQSxLQUFBLHFDQUFBOztJQUNJLFVBQUEsSUFBYyxNQUFBLEdBQU8sQ0FBUCxHQUFTLGtCQUFULEdBQTJCLElBQUssQ0FBQSxDQUFBLENBQWhDLEdBQW1DLE9BQW5DLEdBQXlDLENBQUMsS0FBTSxDQUFBLENBQUEsQ0FBTixDQUFTLElBQUEsQ0FBSyxJQUFMLENBQVQsQ0FBRCxDQUF6QyxHQUE4RCxDQUFDLEtBQU0sQ0FBQSxDQUFBLENBQU4sQ0FBUyxJQUFULENBQUQsQ0FBOUQsR0FBOEUsQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUFOLENBQVMsR0FBQSxDQUFJLElBQUosQ0FBVCxD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SSxDQUFDLE1BQWI7QUFFSTtBQUFBLFNBQUEsd0NBQUE7O1FBRUksSUFBQSxHQUFRLEtBQUssQ0FBQyxRQUFOLENBQWUsSUFBZjtRQUNSLEtBQUEsR0FBUSxJQUFJLENBQUMsS0FBTCxDQUFXLE9BQVg7UUFDUixJQUFBLEdBQVEsSUFBSSxDQUFDLE9BQUwsQ0FBYSxLQUFiLEVBQW9CLEtBQUssQ0FBQyxHQUFOLENBQVUsSUFBVixDQUFwQjtBQUVSLGFBQWEsa0dBQWI7WUFDSSxJQUFBLEdBQU8sS0FBTSxDQUFBLEtBQUE7WUFDYixJQUFHLElBQUksQ0FBQyxVQUFMLENBQWdCLHNCQUFoQixDQUFIO0FBQ0kseUJBREo7O1lBRUEsT0FBQSxDQUFBLEdBQUEsQ0FBSSxNQUFBLENBQU8sSUFBSyxDQUFBLEtBQUEsQ0FBWixFQUFvQixLQUFBLEdBQU0sQ0FBMUIsRUFBNkIsRUFBN0IsQ0FBSjtBQUpKO0FBTkosS0FGSjtDQUFBLE1BQUE7SUFnQkksT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFkLENBQTBCLE1BQTFCO0lBRUEsSUFBRyxJQUFJLENBQUMsR0FBTCxJQUFhLFFBQUEsSUFBSSxDQUFDLEdBQUwsRUFBQSxhQUFZLElBQUksQ0FBQyxJQUFqQixFQUFBLElBQUEsTUFBQSxDQUFoQjtRQUNJLFlBQUEsQ0FBYSxPQUFPLENBQUMsS0FBckIsRUFBNEIsSUFBSSxDQUFDLEdBQWpDLEVBREo7S0FBQSxNQUFBO1FBR0ksV0FBQSxDQUFZLE9BQU8sQ0FBQyxLQUFwQixFQUEyQixXQUFBLENBQUEsQ0FBM0IsRUFISjtLQWxCSiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgIDAwMDAwMDAgICAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMFxuMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgIFxuMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMCAgICAgICAwMDAwMDAwMDAgICAgIDAwMCAgIFxuMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgIFxuIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgIFxuIyMjXG5cbl8gICAgICA9IHJlcXVpcmUgJ2xvZGFzaCdcbmZzICAgICA9IHJlcXVpcmUgJ2ZzJ1xubm9vbiAgID0gcmVxdWlyZSAnbm9vbidcbmtsb3IgICA9IHJlcXVpcmUgJ2tsb3InXG5rYXJnICAgPSByZXF1aXJlICdrYXJnJ1xuc2xhc2ggID0gcmVxdWlyZSAna3NsYXNoJ1xubWF0Y2hyID0gcmVxdWlyZSAnLi9tYXRjaHInXG5cbmtvbG9yICA9IGtsb3Iua29sb3JcbmtvbG9yLmdsb2JhbGl6ZSgpXG5cbk5FV0xJTkUgPSAvXFxyP1xcbi9cblxuIyAgMDAwMDAwMCAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgIFxuIyAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAwICAwMDAwMDAwIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAgIDAwMFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwIFxuXG50ZXh0ID0gXG4gICAgcmVkOiAgICAgJ3InIFxuICAgIGdyZWVuOiAgICdnJ1xuICAgIGJsdWU6ICAgICdiJ1xuICAgIHllbGxvdzogICd5J1xuICAgIG1hZ2VudGE6ICdtJ1xuICAgIGN5YW46ICAgICdjJ1xuICAgIGdyYXk6ICAgICd4J1xuICAgIGJsYWNrOiAgICd6J1xuICAgIHdoaXRlOiAgICd3J1xuICAgICAgICBcbnRleHRDb2xvcnMgPSAnJ1xuZm9yIGMgaW4gXy5rZXlzIHRleHRcbiAgICB0ZXh0Q29sb3JzICs9IFwiICAgICN7Y30gIC4gPSBmYWxzZSAuIC0gI3t0ZXh0W2NdfSAuID8gI3trb2xvcltjXSBib2xkICfilojilognfSN7a29sb3JbY10gJ+KWiOKWiCd9I3trb2xvcltjXSBkaW0gJ+KWiOKWiCd9ICN7a29sb3JbY10oYykgfVxcblwiXG5cbmJncmQgPSBcbiAgICBiZ0JsYWNrOiAgICdaJ1xuICAgIGJnUmVkOiAgICAgJ1InIFxuICAgIGJnR3JlZW46ICAgJ0cnXG4gICAgYmdCbHVlOiAgICAnQidcbiAgICBiZ1llbGxvdzogICdZJ1xuICAgIGJnTWFnZW50YTogJ00nXG4gICAgYmdDeWFuOiAgICAnQydcbiAgICBiZ1doaXRlOiAgICdXJ1xuICAgIFxuYmdmdW5jID0gKGMpIC0+XG4gICAgcyA9IGJncmRbY11cbiAgICBzd2l0Y2ggc1xuICAgICAgICB3aGVuICdaJyB0aGVuICdXMidcbiAgICAgICAgd2hlbiAnVycgdGhlbiAnVzQnXG4gICAgICAgIGVsc2Ugcys0XG4gICAgXG5iZ3JkQ29sb3JzID0gJydcbmZvciBjLHMgb2YgYmdyZFxuICAgIGNpID0gYmxhY2sgXCIgICAgXCIrXy5wYWRFbmQgYywxMVxuICAgIGJncmRDb2xvcnMgKz0gXCIgICAgI3tjfSAgLiA9IGZhbHNlIC4gLSAje2JncmRbY119IC4gPyAje3Jlc2V0KGtvbG9yW2JnZnVuYyBjXShjaSkpfVxcblwiXG4gICAgICAgIFxuYXJncyA9IGthcmcgXCJcIlwiXG5cbmNvbG9yY2F0XG5cbiAgICBmaWxlICAgICAgICAgLiA/IHRoZSBmaWxlKHMpIHRvIGRpc3BsYXkgb3Igc3RkaW4gLiAqKlxuI3t0ZXh0Q29sb3JzfVxuICAgIGZhdCAgICAgICAgICAuID8gI3tib2xkIHdoaXRlICfilrLilrIgICAgIGZhdCd9ICAgLiA9IGZhbHNlXG4gICAgZGltICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4gPSBmYWxzZVxuICAgICAgICA/ICAgICAgICAgICB8I3tkaW0gd2hpdGUgJyAgICDilrLilrIgZGltJ30gXG4je2JncmRDb2xvcnN9XG4gICAgZXh0ICAgICAgICAgIC4gPyB1c2Ugc3ludGF4IGhpZ2hsaWdodGluZyBmb3IgKi5leHRcbiAgICBwYXR0ZXJuICAgICAgLiA/IGNvbG9yaXplIHdpdGggcGF0dGVyblxuICAgIHBhdHRlcm5GaWxlICAuID8gY29sb3JpemUgd2l0aCBwYXR0ZXJucyBpbiBmaWxlICAgLiAtIFBcbiAgICBza2lwRW1wdHkgICAgLiA/IHNraXAgZW1wdHkgbGluZXMgICAgICAgICAgICAgICAgICAgICAgIC4gPSBmYWxzZVxuICAgIGxpbmVOdW1iZXJzICAuID8gcHJlcGVuZCBvdXRwdXQgd2l0aCBsaW5lIG51bWJlcnMgICAgICAgLiA9IGZhbHNlXG4gICAgZGVidWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuIC0gWCAuID0gZmFsc2VcbiAgICBcbnZlcnNpb24gICAje3JlcXVpcmUoXCIje19fZGlybmFtZX0vLi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb259XG5cIlwiXCJcblxuaWYgYXJncy5kZWJ1Z1xuICAgIG5vb24gPSByZXF1aXJlICdub29uJ1xuICAgIGxvZyBub29uLnN0cmluZ2lmeSBhcmdzLCBjb2xvcnM6dHJ1ZVxuXG4jICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgIDAwMCAgICAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAgICAgMDAwICAgIDAwMDAwMDAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4jICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwXG5cbmNvbG9yaXplID0gKHN0ciwgc3RhY2spIC0+XG4gICAgdHJ5XG4gICAgICAgIHNwbCA9IHN0YWNrLm1hcCAocykgLT4gXG4gICAgICAgICAgICBTdHJpbmcocykuc3BsaXQgJy4nXG4gICAgICAgIHNwbCA9IF8uZmxhdHRlbiBzcGxcblxuICAgICAgICBpZiBub3QgKCdrZWVwJyBpbiBzcGwpXG4gICAgICAgICAgICBmb3IgcyBpbiBzcGxcbiAgICAgICAgICAgICAgICBpZiBzLnN1YnN0cigwLDIpID09ICdzOidcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gcy5zdWJzdHIoMilcbiAgICAgICAgICAgICAgICAgICAgc3BsID0gc3BsLmZpbHRlciAocykgLT4gcy5zdWJzdHIoMCwyKSAhPSAnczonXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGZvciBuIGluIHNwbFxuICAgICAgICAgICAgaWYga29sb3Jbbl0/XG4gICAgICAgICAgICAgICAgc3RyID0ga29sb3Jbbl0gc3RyXG4gICAgICAgICAgICBlbHNlIGlmIGtvbG9yW2JnZnVuYyBuXT9cbiAgICAgICAgICAgICAgICBzdHIgPSBrb2xvcltiZ2Z1bmMgbl0gc3RyXG4gICAgY2F0Y2ggZXJyXG4gICAgICAgIGVycm9yIGVyclxuICAgIHN0clxuXG4jIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgIFxuIyAwMDAgICAgICAgIDAwMCAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAwMDBcbiMgMDAwMDAwMCAgICAgMDAwMDAgICAgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwXG4jIDAwMCAgICAgICAgMDAwIDAwMCAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMFxuIyAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICBcblxucmVnZXhlcyA9IFtdXG5cbmV4cGFuZCA9IChlKSAtPlxuICAgIGNscmxzdCA9IF8uYXNzaWduIHRleHQsIGJncmRcbiAgICBjbmFtZXMgPSBfLmNvbmNhdCBfLmtleXModGV4dCksIF8ua2V5cyhiZ3JkKVxuICAgIGludmVydCA9IF8uaW52ZXJ0IGNscmxzdFxuICAgIGludmVydC5mID0gJ2JvbGQnXG4gICAgaW52ZXJ0LmQgPSAnZGltJ1xuICAgIGludmVydC5rID0gJ2tlZXAnXG5cbiAgICBleHBkID0gKGMpIC0+XG4gICAgICAgIGlmIGM/LnNwbGl0PyBhbmQgYyBub3QgaW4gY25hbWVzXG4gICAgICAgICAgICBzID0gYy5zcGxpdCgnc1xcOicpXG4gICAgICAgICAgICByID0gc1swXS5zcGxpdCgnJykubWFwKChhKSAtPiBpbnZlcnRbYV0pLmpvaW4oJy4nKVxuICAgICAgICAgICAgciArPSAnLnM6JyArIHNbMV0gaWYgcy5sZW5ndGggPiAxXG4gICAgICAgICAgICByXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNcbiAgICBcbiAgICBmb3IgcGF0LGNscyBvZiBlXG4gICAgICAgIGlmIF8uaXNBcnJheSBjbHNcbiAgICAgICAgICAgIGVbcGF0XSA9IGNscy5tYXAgKGNscikgLT4gZXhwZCBjbHIuc3BsaXQoJy4nKVswXVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBlW3BhdF0gPSBleHBkIGNsc1xuICAgIGUgXG5cbiMgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgMDAwICAgIDAwMCAwMDAgXG4jIDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwMDAwMCAgICAgIDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgIDAwMCAgIFxuIyAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgXG5cbmZ1bmt5VGV4dCA9IChzKSAtPiBzXG5mdW5reUJncmQgPSAocykgLT4gc1xuXG5mb3IgYyBpbiBfLmtleXMgdGV4dFxuICAgIGlmIGFyZ3NbY11cbiAgICAgICAgZnVua3lUZXh0ID0ga29sb3JbY11cbmZvciBjIGluIF8ua2V5cyBiZ3JkXG4gICAgaWYgYXJnc1tjXVxuICAgICAgICBmdW5reUJncmQgPSBrb2xvcltiZ2Z1bmMgY11cblxuaWYgYXJncy5mYXRcbiAgICBmYXRUZXh0ID0gKHMpIC0+IGZ1bmt5VGV4dChzKS5ib2xkXG5lbHNlXG4gICAgZmF0VGV4dCA9IGZ1bmt5VGV4dFxuXG5pZiBhcmdzLmRpbVxuICAgIGRpbVRleHQgPSAocykgLT4gZmF0VGV4dChzKS5kaW1cbmVsc2VcbiAgICBkaW1UZXh0ID0gZmF0VGV4dFxuXG4jIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICBcbiMgMDAwMDAwMDAgICAwMDAwMDAwMDAgICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgMCAwMDAgIDAwMDAwMDAgXG4jIDAwMCAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAgICAgIDAwMFxuIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAgICAwMDAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCBcblxucGF0dGVybkZ1bmMgPSAtPlxuICAgIFxuICAgIGxvYWRTeW50YXggPSAoZikgLT4gXG4gICAgICAgIGlmIGZzLmV4aXN0c1N5bmMgZlxuICAgICAgICAgICAgZXhwYW5kIG5vb24ubG9hZCBmIFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBlcnJvciBcImNhbid0IGxvY2F0ZSBzeW50YXggZmlsZSAje2Z9XCJcbiAgICBcbiAgICBpZiBhcmdzLnBhdHRlcm4/XG4gICAgICAgIHBhdHRlcm5zID0gZXhwYW5kIG5vb24ucGFyc2UgYXJncy5wYXR0ZXJuXG4gICAgZWxzZSBpZiBhcmdzLnBhdHRlcm5GaWxlP1xuICAgICAgICBwYXR0ZXJucyA9IGxvYWRTeW50YXggYXJncy5wYXR0ZXJuRmlsZVxuICAgICMgZWxzZSBpZiBhcmdzLmV4dD9cbiAgICAgICAgIyBwYXR0ZXJucyA9IGxvYWRTeW50YXggc2xhc2guam9pbiBfX2Rpcm5hbWUsICcuLicsICdzeW50YXgnLCBhcmdzLmV4dCArICcubm9vbidcbiAgICBcbiAgICBpZiBub3QgcGF0dGVybnM/XG4gICAgICAgIHJldHVybiAoY2h1bmspIC0+IGZ1bmt5QmdyZCBkaW1UZXh0IGNodW5rXG4gICAgICAgIFxuICAgIG1hdGNockNvbmZpZyA9IG1hdGNoci5jb25maWcgcGF0dGVybnNcbiAgICAgICAgICAgIFxuICAgIHBhdHRlcm4gPSAoY2h1bmspIC0+XG4gICAgICAgIGNodW5rID0ga29sb3Iuc3RyaXAgY2h1bmtcbiAgICAgICAgcm5ncyA9IG1hdGNoci5yYW5nZXMgbWF0Y2hyQ29uZmlnLCBjaHVua1xuICAgICAgICBkaXNzID0gbWF0Y2hyLmRpc3NlY3Qgcm5nc1xuICAgICAgICBcbiAgICAgICAgaWYgZGlzcy5sZW5ndGhcbiAgICAgICAgICAgIGZvciBkaSBpbiBbZGlzcy5sZW5ndGgtMS4uMF1cbiAgICAgICAgICAgICAgICBkID0gZGlzc1tkaV1cbiAgICAgICAgICAgICAgICBjbHJ6ZCA9IGNvbG9yaXplIGQubWF0Y2gsIGQuc3RhY2sucmV2ZXJzZSgpXG4gICAgICAgICAgICAgICAgY2h1bmsgPSBjaHVuay5zbGljZSgwLCBkLnN0YXJ0KSArIGNscnpkICsgY2h1bmsuc2xpY2UoZC5zdGFydCtkLm1hdGNoLmxlbmd0aClcbiAgICAgICAgY2h1bmtcbiAgICAgICAgXG4gICAgcmV0dXJuIHBhdHRlcm5cblxuIyAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwICAgICAwMFxuIyAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwMFxuIyAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAwIDAwMFxuIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuXG5jb2xvclN0cmVhbSA9IChzdHJlYW0sIHBhdHRlcm4pIC0+XG4gICAgXG4gICAgbGluZW5vID0gMFxuICAgIHN0cmVhbS5vbiAnZGF0YScsIChjaHVuaykgLT5cbiAgICAgICAgXG4gICAgICAgIGxpbmVzID0gY2h1bmsuc3BsaXQgJ1xcbidcbiAgICAgICAgY29sb3JMaW5lcyA9IGxpbmVzLm1hcCAobCkgLT4gcGF0dGVybiBsXG4gICAgICAgIFxuICAgICAgICBpZiBhcmdzLnNraXBFbXB0eVxuICAgICAgICAgICAgY29sb3JMaW5lcyA9IGNvbG9yTGluZXMuZmlsdGVyIChsKSAtPiBcbiAgICAgICAgICAgICAgICBrb2xvci5zdHJpcChsKS5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGlmIGFyZ3MubGluZU51bWJlcnNcbiAgICAgICAgICAgIGNvbG9yTGluZXMgPSBjb2xvckxpbmVzLm1hcCAobCkgLT4gXG4gICAgICAgICAgICAgICAgbGluZW5vICs9IDFcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JheShkaW0gXy5wYWRFbmQoXCIje2xpbmVub31cIiw2KSkgKyBsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGxvZyBjb2xvckxpbmVzLmpvaW4gJ1xcbidcbiAgICAgICAgXG5zeW50YXhTdHJlYW0gPSAoc3RyZWFtLCBleHQpIC0+XG5cbiAgICBsaW5lbm8gPSAwXG4gICAgc3RyZWFtLm9uICdkYXRhJywgKGNodW5rKSAtPlxuICAgICAgICBcbiAgICAgICAgbGluZXMgPSBjaHVuay5zcGxpdCAnXFxuJ1xuICAgICAgICBjb2xvckxpbmVzID0gW11cbiAgICAgICAgXG4gICAgICAgIHJuZ3MgPSBrbG9yLmRpc3NlY3QgbGluZXMsIGV4dFxuICAgICAgICBmb3IgaW5kZXggaW4gWzAuLi5saW5lcy5sZW5ndGhdXG4gICAgICAgICAgICBjb2xvckxpbmVzLnB1c2ggb3V0cHV0IHJuZ3NbaW5kZXhdLCBpbmRleCsxLCBbXVxuICAgICAgICBcbiAgICAgICAgaWYgYXJncy5za2lwRW1wdHlcbiAgICAgICAgICAgIGNvbG9yTGluZXMgPSBjb2xvckxpbmVzLmZpbHRlciAobCkgLT4gXG4gICAgICAgICAgICAgICAga29sb3Iuc3RyaXAobCkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgIFxuICAgICAgICBsb2cgY29sb3JMaW5lcy5qb2luICdcXG4nXG4gICAgXG4jIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4jIDAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAwMDAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwICAgIDAwMCAgICAwMDAwMDAwICAgXG4jIDAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4jIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG5cbkxJID0gLyhcXHNsaVxcZFxcc3xcXHNoXFxkXFxzKS9cblxua29sb3JpemUgPSAoY2h1bmspIC0+IFxuICAgIFxuICAgIGlmIGNuID0ga29sb3IubWFwW2NodW5rLnZhbHVlXVxuICAgICAgICBpZiBjbiBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgICB2ID0gY2h1bmsubWF0Y2hcbiAgICAgICAgICAgIGZvciBjciBpbiBjblxuICAgICAgICAgICAgICAgIHYgPSBrb2xvcltjcl0gdlxuICAgICAgICAgICAgcmV0dXJuIHZcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGtvbG9yW2NuXSBjaHVuay5tYXRjaFxuICAgICAgICAgICAgXG4gICAgaWYgY2h1bmsudmFsdWUuZW5kc1dpdGggJ2ZpbGUnXG4gICAgICAgIHc4IGNodW5rLm1hdGNoXG4gICAgZWxzZSBpZiBjaHVuay52YWx1ZS5lbmRzV2l0aCAnZXh0J1xuICAgICAgICB3MyBjaHVuay5tYXRjaFxuICAgIGVsc2UgaWYgY2h1bmsudmFsdWUuc3RhcnRzV2l0aCAncHVuY3QnXG4gICAgICAgIGlmIExJLnRlc3QgY2h1bmsudmFsdWVcbiAgICAgICAgICAgIGNvbG9yaXplIG1hdGNoOmNodW5rLm1hdGNoLCB2YWx1ZTpjaHVuay52YWx1ZS5yZXBsYWNlIExJLCAnICdcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdzIgY2h1bmsubWF0Y2hcbiAgICBlbHNlXG4gICAgICAgIGlmIExJLnRlc3QgY2h1bmsudmFsdWVcbiAgICAgICAgICAgIGNvbG9yaXplIG1hdGNoOmNodW5rLm1hdGNoLCB2YWx1ZTpjaHVuay52YWx1ZS5yZXBsYWNlIExJLCAnICdcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY2h1bmsubWF0Y2hcblxuIyAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiMgIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgICAgICAgMDAwMDAwMCAgICAgIDAwMCAgICAgXG5cbm91dHB1dCA9IChybmdzLCBudW1iZXIpIC0+XG4gICAgXG4gICAgcnBhZCA9IChzLCBsKSAtPlxuICAgICAgICBzID0gU3RyaW5nIHNcbiAgICAgICAgd2hpbGUgcy5sZW5ndGggPCBsIHRoZW4gcyArPSAnICdcbiAgICAgICAgc1xuICAgIFxuICAgIGNscnpkID0gJydcbiAgICBcbiAgICBpZiBhcmdzLmxpbmVOdW1iZXJzXG4gICAgICAgIG51bXN0ciA9IFN0cmluZyBudW1iZXJcbiAgICAgICAgY2xyemQgKz0gdzIobnVtc3RyKSArIHJwYWQgJycsIDQtbnVtc3RyLmxlbmd0aFxuICAgICAgICBcbiAgICBjID0gMFxuXG4gICAgZm9yIGkgaW4gWzAuLi5ybmdzLmxlbmd0aF1cbiAgICAgICAgd2hpbGUgYyA8IHJuZ3NbaV0uc3RhcnQgXG4gICAgICAgICAgICBjbHJ6ZCArPSAnICdcbiAgICAgICAgICAgIGMrK1xuICAgICAgICBjbHJ6ZCArPSBrb2xvcml6ZSBybmdzW2ldXG4gICAgICAgIGMgKz0gcm5nc1tpXS5sZW5ndGhcbiAgICAgICAgXG4gICAgY2xyemRcblxuIyMjXG4gMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgICAgXG4wMDAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4wMDAgICAgICAgMDAwMDAwMDAwICAgICAwMDAgICAgICAgXG4wMDAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4gMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4jIyNcbiAgICBcbmlmIGFyZ3MuZmlsZS5sZW5ndGhcbiAgXG4gICAgZm9yIGZpbGUgaW4gYXJncy5maWxlICAgIFxuXG4gICAgICAgIHRleHQgID0gc2xhc2gucmVhZFRleHQgZmlsZVxuICAgICAgICBsaW5lcyA9IHRleHQuc3BsaXQgTkVXTElORVxuICAgICAgICBybmdzICA9IGtsb3IuZGlzc2VjdCBsaW5lcywgc2xhc2guZXh0IGZpbGVcbiAgICAgICAgXG4gICAgICAgIGZvciBpbmRleCBpbiBbMC4uLmxpbmVzLmxlbmd0aF1cbiAgICAgICAgICAgIGxpbmUgPSBsaW5lc1tpbmRleF1cbiAgICAgICAgICAgIGlmIGxpbmUuc3RhcnRzV2l0aCAnLy8jIHNvdXJjZU1hcHBpbmdVUkwnXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIGxvZyBvdXRwdXQgcm5nc1tpbmRleF0sIGluZGV4KzEsIFtdXG4gICAgICAgICAgICAgICAgXG5lbHNlXG4gICAgXG4gICAgcHJvY2Vzcy5zdGRpbi5zZXRFbmNvZGluZyAndXRmOCdcbiAgICBcbiAgICBpZiBhcmdzLmV4dCBhbmQgYXJncy5leHQgaW4ga2xvci5leHRzXG4gICAgICAgIHN5bnRheFN0cmVhbSBwcm9jZXNzLnN0ZGluLCBhcmdzLmV4dFxuICAgIGVsc2UgICAgXG4gICAgICAgIGNvbG9yU3RyZWFtIHByb2Nlc3Muc3RkaW4sIHBhdHRlcm5GdW5jKClcbiJdfQ==
//# sourceURL=../coffee/colorcat.coffee