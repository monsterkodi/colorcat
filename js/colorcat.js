// koffee 0.56.0

/*
 0000000   0000000   000       0000000   00000000    0000000   0000000   000000000
000       000   000  000      000   000  000   000  000       000   000     000   
000       000   000  000      000   000  0000000    000       000000000     000   
000       000   000  000      000   000  000   000  000       000   000     000   
 0000000   0000000   0000000   0000000   000   000   0000000  000   000     000
 */
var NEWLINE, args, bgfunc, bgrd, bgrdColors, c, clrlst, cnames, colorStream, colorize, dimText, expand, fatText, fbgcol, fbgnms, file, funkyBgrd, funkyText, i, invert, j, k, karg, klor, kolor, len, len1, len2, m, noon_stringify, o, p, patternFunc, q, ref, ref1, ref2, ref3, regexes, rpad, s, shortb, shortf, shorts, slash, syntaxStream, t, text, textColors, v,
    indexOf = [].indexOf;

klor = require('klor');

karg = require('karg');

kolor = klor.kolor;

kolor.globalize();

NEWLINE = /\r?\n/;

rpad = function(s, l) {
    s = String(s);
    while (s.length < l) {
        s += ' ';
    }
    return s;
};

text = {
    white: 'w',
    cyan: 'c',
    magenta: 'm',
    blue: 'b',
    yellow: 'y',
    green: 'g',
    red: 'r'
};

textColors = '';

for (c in text) {
    s = text[c];
    shorts = '';
    switch (s) {
        case 'x':
        case 'z':
            break;
        default:
            for (i = j = 1; j <= 8; i = ++j) {
                shortf = s + i;
                shorts += kolor[shortf](' ' + shortf + ' ');
            }
    }
    textColors += "    " + c + "  . = false . - " + text[c] + " . ? " + (kolor[c]('██')) + (dim(kolor[c]('██'))) + shorts + "\n";
}

bgrd = {
    bgRed: 'R',
    bgGreen: 'G',
    bgYellow: 'Y',
    bgBlue: 'B',
    bgMagenta: 'M',
    bgCyan: 'C',
    bgWhite: 'W'
};

bgfunc = function(c) {
    s = bgrd[c];
    switch (s) {
        case 'Z':
            return 'W2';
        case 'W':
            return 'W4';
        default:
            return s + 4;
    }
};

bgrdColors = '';

for (c in bgrd) {
    s = bgrd[c];
    shorts = '';
    switch (s) {
        case 'W':
            for (i = m = 1; m <= 8; i = ++m) {
                shortb = 'W' + i;
                shortf = 'w'.toLowerCase() + (9 - i);
                shorts += kolor[shortf](kolor[shortb](' ' + shortb + ' '));
            }
            break;
        case 'Z':
            break;
        default:
            for (i = o = 1; o <= 8; i = ++o) {
                shortb = s + i;
                shortf = s.toLowerCase() + (9 - i);
                shorts += kolor[shortf](kolor[shortb](' ' + shortb + ' '));
            }
    }
    bgrdColors += "    " + c + "  . = false . - " + bgrd[c] + " . ? " + (reset(kolor[bgfunc(c)]("    "))) + shorts + "\n";
}

args = karg("\ncolorcat\n\n    file         . ? the file(s) to display or stdin . **\n    fat          . ? " + (gray('     bold')) + "        . = false\n    dim                                           . = false\n        ?           |" + (dim(white('  ▼▼ dim'))) + " \n" + textColors + "\n" + bgrdColors + "\n    ext          . ? use syntax highlighting for *.ext\n    pattern      . ? colorize with pattern\n    patternFile  . ? colorize with patterns in file   . - P\n    skipEmpty    . ? skip empty lines                       . = false\n    lineNumbers  . ? prepend output with line numbers       . = false\n    debug                                             . - X . = false\n    \nversion   " + (require(__dirname + "/../package.json").version));

if (args.debug) {
    noon_stringify = require('noon/js/stringify');
    console.log(noon_stringify(args, {
        colors: true
    }));
}

colorize = function(str, stack) {
    var err, len, len1, n, p, q, spl;
    try {
        spl = stack.map(function(s) {
            return String(s).split('.');
        });
        spl = spl.flat();
        if (!(indexOf.call(spl, 'keep') >= 0)) {
            for (p = 0, len = spl.length; p < len; p++) {
                s = spl[p];
                if (s.substr(0, 2) === 's:') {
                    str = s.substr(2);
                    spl = spl.filter(function(s) {
                        return s.substr(0, 2) !== 's:';
                    });
                    break;
                }
            }
        }
        for (q = 0, len1 = spl.length; q < len1; q++) {
            n = spl[q];
            if (kolor[n] != null) {
                str = kolor[n](str);
            } else if (kolor[bgfunc(n)] != null) {
                str = kolor[bgfunc(n)](str);
            }
        }
    } catch (error) {
        err = error;
        console.error(err);
    }
    return str;
};

regexes = [];

clrlst = Object.assign({}, bgrd);

clrlst = Object.assign(clrlst, text);

fbgnms = kolor.FG_NAMES.concat(kolor.BG_NAMES);

fbgcol = kolor.FG_COLORS.concat(kolor.BG_COLORS);

cnames = Object.keys(text).concat(Object.keys(bgrd));

cnames = cnames.concat(fbgnms);

invert = {};

for (k in clrlst) {
    v = clrlst[k];
    invert[v] = k;
}

invert.f = 'bold';

invert.d = 'dim';

invert.k = 'keep';

invert.x = 'gray';

invert.z = 'w2';

invert.Z = 'W1';

expand = function(e) {
    var cls, expd, pat;
    expd = function(c) {
        var r, ref, ref1;
        if (ref = c[0], indexOf.call(fbgcol, ref) >= 0) {
            if (ref1 = c.slice(0, 2), indexOf.call(fbgnms, ref1) >= 0) {
                if (c.length === 2) {
                    return c;
                } else {
                    return c.slice(0, 2) + '.' + expd(c.slice(2));
                }
            }
        }
        if (((c != null ? c.split : void 0) != null) && indexOf.call(cnames, c) < 0) {
            s = c.split('s\:');
            if (invert[s[0][0]]) {
                if (s[0].length === 1) {
                    r = invert[s[0][0]];
                } else {
                    r = invert[s[0][0]] + '.' + expd(s[0].slice(1));
                }
            } else {
                r = '';
            }
            if (s.length > 1) {
                r += '.s:' + s[1];
            }
            return r;
        } else {
            return c;
        }
    };
    for (pat in e) {
        cls = e[pat];
        if (cls instanceof Array) {
            e[pat] = cls.map(function(clr) {
                return expd(clr.split('.')[0]);
            });
        } else {
            e[pat] = expd(cls);
        }
    }
    return e;
};

funkyText = function(s) {
    return s;
};

funkyBgrd = function(s) {
    return s;
};

ref = Object.keys(text);
for (p = 0, len = ref.length; p < len; p++) {
    c = ref[p];
    if (args[c]) {
        funkyText = kolor[c];
    }
}

ref1 = Object.keys(bgrd);
for (q = 0, len1 = ref1.length; q < len1; q++) {
    c = ref1[q];
    if (args[c]) {
        funkyBgrd = kolor[bgfunc(c)];
    }
}

if (args.fat) {
    fatText = function(s) {
        return bold(funkyText(s));
    };
} else {
    fatText = funkyText;
}

if (args.dim) {
    dimText = function(s) {
        return dim(fatText(s));
    };
} else {
    dimText = fatText;
}

patternFunc = function() {
    var loadSyntax, matchr, matchrConfig, noon_parse, pattern, patterns;
    loadSyntax = function(f) {
        var fs, noon_load;
        fs = require('fs');
        if (fs.existsSync(f)) {
            noon_load = require('noon/js/load');
            return expand(noon_load(f));
        } else {
            return console.error("can't locate syntax file " + f);
        }
    };
    if (args.pattern != null) {
        noon_parse = require('noon/js/parse');
        patterns = expand(noon_parse(args.pattern));
    } else if (args.patternFile != null) {
        patterns = loadSyntax(args.patternFile);
    }
    if (patterns == null) {
        return function(chunk) {
            return funkyBgrd(dimText(chunk));
        };
    }
    matchr = require('./matchr');
    matchrConfig = matchr.config(patterns);
    pattern = function(chunk) {
        var clrzd, d, di, diss, ref2, rngs, t;
        chunk = kolor.strip(chunk);
        rngs = matchr.ranges(matchrConfig, chunk);
        diss = matchr.dissect(rngs);
        if (diss.length) {
            for (di = t = ref2 = diss.length - 1; ref2 <= 0 ? t <= 0 : t >= 0; di = ref2 <= 0 ? ++t : --t) {
                d = diss[di];
                clrzd = colorize(d.match, d.stack.reverse());
                chunk = chunk.slice(0, d.start) + clrzd + chunk.slice(d.start + d.match.length);
            }
        }
        return chunk;
    };
    return pattern;
};

colorStream = function(stream, pattern) {
    var lineno;
    lineno = 0;
    return stream.on('data', function(chunk) {
        var colorLines, lines;
        lines = chunk.split('\n');
        colorLines = lines.map(function(l) {
            return pattern(l);
        });
        if (args.skipEmpty) {
            colorLines = colorLines.filter(function(l) {
                return kolor.strip(l).length > 0;
            });
        }
        if (args.lineNumbers) {
            colorLines = colorLines.map(function(l) {
                lineno += 1;
                return gray(dim(rpad("" + lineno, 6))) + l;
            });
        }
        return console.log(colorLines.join('\n'));
    });
};

syntaxStream = function(stream, ext) {
    var lineno;
    lineno = 0;
    return stream.on('data', function(chunk) {
        var colorLines, index, lines, ref2, rngs, t;
        lines = chunk.split('\n');
        colorLines = [];
        rngs = klor.dissect(lines, ext);
        for (index = t = 0, ref2 = lines.length; 0 <= ref2 ? t < ref2 : t > ref2; index = 0 <= ref2 ? ++t : --t) {
            colorLines.push(output(rngs[index], index + 1, []));
        }
        if (args.skipEmpty) {
            colorLines = colorLines.filter(function(l) {
                return kolor.strip(l).length > 0;
            });
        }
        return console.log(colorLines.join('\n'));
    });
};


/*
 0000000   0000000   000000000    
000       000   000     000       
000       000000000     000       
000       000   000     000       
 0000000  000   000     000
 */

if (args.file.length) {
    slash = require('kslash');
    ref2 = args.file;
    for (t = 0, len2 = ref2.length; t < len2; t++) {
        file = ref2[t];
        text = slash.readText(file);
        console.log(klor.syntax({
            text: text,
            ext: slash.ext(file),
            numbers: args.lineNumbers
        }));
    }
} else {
    process.stdin.setEncoding('utf8');
    if (args.ext && (ref3 = args.ext, indexOf.call(klor.exts, ref3) >= 0)) {
        syntaxStream(process.stdin, args.ext);
    } else {
        colorStream(process.stdin, patternFunc());
    }
}

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/colorcat.coffee