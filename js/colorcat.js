// koffee 0.56.0

/*
 0000000   0000000   000       0000000   00000000    0000000   0000000   000000000
000       000   000  000      000   000  000   000  000       000   000     000   
000       000   000  000      000   000  0000000    000       000000000     000   
000       000   000  000      000   000  000   000  000       000   000     000   
 0000000   0000000   0000000   0000000   000   000   0000000  000   000     000
 */
var LI, NEWLINE, args, bgfunc, bgrd, bgrdColors, c, ci, colorStream, colorize, dimText, expand, fatText, file, funkyBgrd, funkyText, index, j, k, karg, klor, kolor, kolorize, len, len1, len2, len3, line, lines, m, noon, o, output, p, patternFunc, ref, ref1, ref2, ref3, ref4, ref5, regexes, rngs, rpad, s, slash, syntaxStream, text, textColors,
    indexOf = [].indexOf;

if (koffee_9_0 = process.hrtime.bigint()) {
    klor = require('klor');
    console.log('klor', (function(b){ let f=1000n; for (let u of ['ns','μs','ms','s']) { if (u=='s' || b<f) { return ''+(1000n*b/f)+u; } f*=1000n; }})(process.hrtime.bigint()-koffee_9_0));
};

if (koffee_10_0 = process.hrtime.bigint()) {
    karg = require('karg');
    console.log('karg', (function(b){ let f=1000n; for (let u of ['ns','μs','ms','s']) { if (u=='s' || b<f) { return ''+(1000n*b/f)+u; } f*=1000n; }})(process.hrtime.bigint()-koffee_10_0));
};

kolor = klor.kolor;

kolor.globalize();

NEWLINE = /\r?\n/;

rpad = function(s, l) {
    s = String(s);
    while (s.length < l) {
        s += ' ';
    }
    return s;
};

text = {
    red: 'r',
    green: 'g',
    blue: 'b',
    yellow: 'y',
    magenta: 'm',
    cyan: 'c',
    gray: 'x',
    black: 'z',
    white: 'w'
};

textColors = '';

ref = Object.keys(text);
for (j = 0, len = ref.length; j < len; j++) {
    c = ref[j];
    textColors += "    " + c + "  . = false . - " + text[c] + " . ? " + (kolor[c](bold('██'))) + (kolor[c]('██')) + (kolor[c](dim('██'))) + " " + (kolor[c](c)) + "\n";
}

bgrd = {
    bgBlack: 'Z',
    bgRed: 'R',
    bgGreen: 'G',
    bgBlue: 'B',
    bgYellow: 'Y',
    bgMagenta: 'M',
    bgCyan: 'C',
    bgWhite: 'W'
};

bgfunc = function(c) {
    var s;
    s = bgrd[c];
    switch (s) {
        case 'Z':
            return 'W2';
        case 'W':
            return 'W4';
        default:
            return s + 4;
    }
};

bgrdColors = '';

for (c in bgrd) {
    s = bgrd[c];
    ci = black("    " + rpad(c, 11));
    bgrdColors += "    " + c + "  . = false . - " + bgrd[c] + " . ? " + (reset(kolor[bgfunc(c)](ci))) + "\n";
}

args = karg("\ncolorcat\n\n    file         . ? the file(s) to display or stdin . **\n" + textColors + "\n    fat          . ? " + (bold(white('▲▲     fat'))) + "   . = false\n    dim                                           . = false\n        ?           |" + (dim(white('    ▲▲ dim'))) + " \n" + bgrdColors + "\n    ext          . ? use syntax highlighting for *.ext\n    pattern      . ? colorize with pattern\n    patternFile  . ? colorize with patterns in file   . - P\n    skipEmpty    . ? skip empty lines                       . = false\n    lineNumbers  . ? prepend output with line numbers       . = false\n    debug                                             . - X . = false\n    \nversion   " + (require(__dirname + "/../package.json").version));

if (args.debug) {
    noon = require('noon');
    console.log(noon.stringify(args, {
        colors: true
    }));
}

colorize = function(str, stack) {
    var err, k, len1, len2, m, n, spl;
    try {
        spl = stack.map(function(s) {
            return String(s).split('.');
        });
        spl = spl.flat();
        if (!(indexOf.call(spl, 'keep') >= 0)) {
            for (k = 0, len1 = spl.length; k < len1; k++) {
                s = spl[k];
                if (s.substr(0, 2) === 's:') {
                    str = s.substr(2);
                    spl = spl.filter(function(s) {
                        return s.substr(0, 2) !== 's:';
                    });
                    break;
                }
            }
        }
        for (m = 0, len2 = spl.length; m < len2; m++) {
            n = spl[m];
            if (kolor[n] != null) {
                str = kolor[n](str);
            } else if (kolor[bgfunc(n)] != null) {
                str = kolor[bgfunc(n)](str);
            }
        }
    } catch (error) {
        err = error;
        console.error(err);
    }
    return str;
};

regexes = [];

expand = function(e) {
    var _, clrlst, cls, cnames, expd, invert, pat;
    if (koffee_125_4 = process.hrtime.bigint()) {
        _ = require('lodash');
        console.log('lodash', (function(b){ let f=1000n; for (let u of ['ns','μs','ms','s']) { if (u=='s' || b<f) { return ''+(1000n*b/f)+u; } f*=1000n; }})(process.hrtime.bigint()-koffee_125_4));
    };
    clrlst = _.assign(text, bgrd);
    cnames = _.concat(Object.keys(text), Object.keys(bgrd));
    invert = _.invert(clrlst);
    invert.f = 'bold';
    invert.d = 'dim';
    invert.k = 'keep';
    expd = function(c) {
        var r;
        if (((c != null ? c.split : void 0) != null) && indexOf.call(cnames, c) < 0) {
            s = c.split('s\:');
            r = s[0].split('').map(function(a) {
                return invert[a];
            }).join('.');
            if (s.length > 1) {
                r += '.s:' + s[1];
            }
            return r;
        } else {
            return c;
        }
    };
    for (pat in e) {
        cls = e[pat];
        if (_.isArray(cls)) {
            e[pat] = cls.map(function(clr) {
                return expd(clr.split('.')[0]);
            });
        } else {
            e[pat] = expd(cls);
        }
    }
    return e;
};

funkyText = function(s) {
    return s;
};

funkyBgrd = function(s) {
    return s;
};

ref1 = Object.keys(text);
for (k = 0, len1 = ref1.length; k < len1; k++) {
    c = ref1[k];
    if (args[c]) {
        funkyText = kolor[c];
    }
}

ref2 = Object.keys(bgrd);
for (m = 0, len2 = ref2.length; m < len2; m++) {
    c = ref2[m];
    if (args[c]) {
        funkyBgrd = kolor[bgfunc(c)];
    }
}

if (args.fat) {
    fatText = function(s) {
        return funkyText(s).bold;
    };
} else {
    fatText = funkyText;
}

if (args.dim) {
    dimText = function(s) {
        return fatText(s).dim;
    };
} else {
    dimText = fatText;
}

patternFunc = function() {
    var loadSyntax, matchr, matchrConfig, pattern, patterns;
    if (koffee_184_4 = process.hrtime.bigint()) {
        noon = require('noon');
        console.log('noon', (function(b){ let f=1000n; for (let u of ['ns','μs','ms','s']) { if (u=='s' || b<f) { return ''+(1000n*b/f)+u; } f*=1000n; }})(process.hrtime.bigint()-koffee_184_4));
    };
    if (koffee_185_4 = process.hrtime.bigint()) {
        matchr = require('./matchr');
        console.log('matchr', (function(b){ let f=1000n; for (let u of ['ns','μs','ms','s']) { if (u=='s' || b<f) { return ''+(1000n*b/f)+u; } f*=1000n; }})(process.hrtime.bigint()-koffee_185_4));
    };
    loadSyntax = function(f) {
        var fs;
        fs = require('fs');
        if (fs.existsSync(f)) {
            return expand(noon.load(f));
        } else {
            return console.error("can't locate syntax file " + f);
        }
    };
    if (args.pattern != null) {
        patterns = expand(noon.parse(args.pattern));
    } else if (args.patternFile != null) {
        patterns = loadSyntax(args.patternFile);
    }
    if (patterns == null) {
        return function(chunk) {
            return funkyBgrd(dimText(chunk));
        };
    }
    matchrConfig = matchr.config(patterns);
    pattern = function(chunk) {
        var clrzd, d, di, diss, o, ref3, rngs;
        chunk = kolor.strip(chunk);
        rngs = matchr.ranges(matchrConfig, chunk);
        diss = matchr.dissect(rngs);
        if (diss.length) {
            for (di = o = ref3 = diss.length - 1; ref3 <= 0 ? o <= 0 : o >= 0; di = ref3 <= 0 ? ++o : --o) {
                d = diss[di];
                clrzd = colorize(d.match, d.stack.reverse());
                chunk = chunk.slice(0, d.start) + clrzd + chunk.slice(d.start + d.match.length);
            }
        }
        return chunk;
    };
    return pattern;
};

colorStream = function(stream, pattern) {
    var lineno;
    lineno = 0;
    return stream.on('data', function(chunk) {
        var colorLines, lines;
        lines = chunk.split('\n');
        colorLines = lines.map(function(l) {
            return pattern(l);
        });
        if (args.skipEmpty) {
            colorLines = colorLines.filter(function(l) {
                return kolor.strip(l).length > 0;
            });
        }
        if (args.lineNumbers) {
            colorLines = colorLines.map(function(l) {
                lineno += 1;
                return gray(dim(rpad("" + lineno, 6))) + l;
            });
        }
        return console.log(colorLines.join('\n'));
    });
};

syntaxStream = function(stream, ext) {
    var lineno;
    lineno = 0;
    return stream.on('data', function(chunk) {
        var colorLines, index, lines, o, ref3, rngs;
        lines = chunk.split('\n');
        colorLines = [];
        rngs = klor.dissect(lines, ext);
        for (index = o = 0, ref3 = lines.length; 0 <= ref3 ? o < ref3 : o > ref3; index = 0 <= ref3 ? ++o : --o) {
            colorLines.push(output(rngs[index], index + 1, []));
        }
        if (args.skipEmpty) {
            colorLines = colorLines.filter(function(l) {
                return kolor.strip(l).length > 0;
            });
        }
        return console.log(colorLines.join('\n'));
    });
};

LI = /(\sli\d\s|\sh\d\s)/;

kolorize = function(chunk) {
    var cn, cr, len3, o, v;
    if (cn = kolor.map[chunk.value]) {
        if (cn instanceof Array) {
            v = chunk.match;
            for (o = 0, len3 = cn.length; o < len3; o++) {
                cr = cn[o];
                v = kolor[cr](v);
            }
            return v;
        } else {
            return kolor[cn](chunk.match);
        }
    }
    if (chunk.value.endsWith('file')) {
        return w8(chunk.match);
    } else if (chunk.value.endsWith('ext')) {
        return w3(chunk.match);
    } else if (chunk.value.startsWith('punct')) {
        if (LI.test(chunk.value)) {
            return colorize({
                match: chunk.match,
                value: chunk.value.replace(LI, ' ')
            });
        } else {
            return w2(chunk.match);
        }
    } else {
        if (LI.test(chunk.value)) {
            return colorize({
                match: chunk.match,
                value: chunk.value.replace(LI, ' ')
            });
        } else {
            return chunk.match;
        }
    }
};

output = function(rngs, number) {
    var clrzd, i, numstr, o, ref3;
    clrzd = '';
    if (args.lineNumbers) {
        numstr = String(number);
        clrzd += w2(numstr) + rpad('', 4 - numstr.length);
    }
    c = 0;
    for (i = o = 0, ref3 = rngs.length; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
        while (c < rngs[i].start) {
            clrzd += ' ';
            c++;
        }
        clrzd += kolorize(rngs[i]);
        c += rngs[i].length;
    }
    return clrzd;
};


/*
 0000000   0000000   000000000    
000       000   000     000       
000       000000000     000       
000       000   000     000       
 0000000  000   000     000
 */

if (args.file.length) {
    if (koffee_330_4 = process.hrtime.bigint()) {
        slash = require('kslash');
        console.log('slash', (function(b){ let f=1000n; for (let u of ['ns','μs','ms','s']) { if (u=='s' || b<f) { return ''+(1000n*b/f)+u; } f*=1000n; }})(process.hrtime.bigint()-koffee_330_4));
    };
    ref3 = args.file;
    for (o = 0, len3 = ref3.length; o < len3; o++) {
        file = ref3[o];
        text = slash.readText(file);
        lines = text.split(NEWLINE);
        rngs = klor.dissect(lines, slash.ext(file));
        for (index = p = 0, ref4 = lines.length; 0 <= ref4 ? p < ref4 : p > ref4; index = 0 <= ref4 ? ++p : --p) {
            line = lines[index];
            if (line.startsWith('//# sourceMappingURL')) {
                continue;
            }
            console.log(output(rngs[index], index + 1, []));
        }
    }
} else {
    process.stdin.setEncoding('utf8');
    if (args.ext && (ref5 = args.ext, indexOf.call(klor.exts, ref5) >= 0)) {
        syntaxStream(process.stdin, args.ext);
    } else {
        colorStream(process.stdin, patternFunc());
    }
}

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/colorcat.coffee